{describe, it, mock, mock_fn, snapshot, eq, match_any} = import `./testing`

mock_hooks = []
mock_maps = []


mock:: `pirates`, fn: {
  addHook: mock_fn:: fn ...args: mock_hooks.push(args)
}

mock:: `source-map-support`, fn: {
  install: mock_fn:: fn ...args: mock_maps.push(args)
}

mock:: `@fink/loxia`, fn: {
  generate: mock_fn()
}

{generate} = import `@fink/loxia`


describe:: `hook`, fn:
  require(`.`)

  it:: `registers hook`, fn:
    mock_hooks eq [
      [match_any(Function), {exts: [`.fnk`], ignoreNodeModules: false}]
    ]


  it:: `transforms fnk`, fn:
    generate.mockReturnValue({code: `test-code`, map: `test-map`})

    [[hook]] = mock_hooks

    hook(`test = 1234`, `test.fnk`) eq `test-code`


  it:: `registers source map support`, fn:
    mock_maps eq [[{
      handleUncaughtExceptions: false,
      environment: `node`,
      retrieveSourceMap: match_any(Function)
    }]]


  it:: `gets source-map`, fn:
    [[{retrieveSourceMap}]] = mock_maps

    retrieveSourceMap(`test.fnk`) eq {map: `test-map`, url: null}


  it:: `returns null for missing source-map`, fn:
    [[{retrieveSourceMap}]] = mock_maps

    retrieveSourceMap(`test-foo.fnk`) eq null

