{describe, it, mock, mock_fn, expect} = import '@fink/jest/test.fnk'
{to_equal, to_throw, any, to_match_snapshot} = import '@fink/jest/test.fnk'
{Function} = import '@fink/js-interop/globals.fnk'
{null} = import '@fink/js-interop/nullish.fnk'



# TODO: don't use mutable objects
mock_hooks = []
mock_maps = []

mock 'pirates', fn: dict:
  addHook: mock_fn fn ...args: mock_hooks.push args

mock 'source-map-support', fn: dict:
  install: mock_fn fn ...args: mock_maps.push args


describe 'hook', fn:
  require './index.fnk'

  it 'registers hook', fn:
    expect
      mock_hooks
      to_equal
        [[
          any Function
          {exts: ['.fnk'], ignoreNodeModules: false}
        ]]


  it 'transforms fnk', fn:
    [[hook]] = mock_hooks

    expect
      hook 'test = 1234', 'test.fnk'
      to_match_snapshot


  it 'throws parse errors', fn:
    [[hook]] = mock_hooks

    expect
      fn: hook 'foo [', 'test.fnk'
      to_throw "test.fnk:1:5
        1| foo [
                ^

        Expected `,` or indented(>=1) new line or `]`"


  it 'throws transform errors', fn:
    [[hook]] = mock_hooks

    expect
      fn: hook '123 = foo', 'test.fnk'
      to_throw 'test.fnk:1:0
        1| 123 = foo
           ^

        Unable to transform `assign =`.

        TypeError: Property left of AssignmentExpression expected node to be of a type ["LVal"] but instead got "NumericLiteral"
        '


  it 'registers source map support', fn:
    expect
      mock_maps
      to_equal
        list: list: dict:
          handleUncaughtExceptions: false
          environment: 'node'
          retrieveSourceMap: any Function


  it 'gets source-map', fn:
    [[{retrieveSourceMap}]] = mock_maps

    expect
      retrieveSourceMap 'test.fnk'
      to_match_snapshot


  it 'returns null for missing source-map', fn:
    [[{retrieveSourceMap}]] = mock_maps

    expect
      retrieveSourceMap 'test-foo.fnk'
      to_equal null




