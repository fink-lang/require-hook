{addHook} = import 'pirates'
{install: sms_install} = import 'source-map-support'

{parse} = import '@fink/larix'
{generate} = import '@fink/loxia'
{set_props} = import '@fink/std-lib/obj'


handle_error = fn obj_with_errors:
  match obj_with_errors:
    # TODO investigate why istanbul thinks we are not covering else
    # istanbul ignore else
    {errors: [{}]}:
      {errors: [{error, stack}]} = obj_with_errors

      err = new SyntaxError error
      set_props err, {stack: '${error}${stack}'}
      throw err
    else:
      obj_with_errors


transform = fn source, filename:
  ast = parse source, filename
  handle_error ast
  # TODO should loxia have it's own setting for source_map
  opts = dict:
    module_type: 'cjs'
    filename
    sourceFileName: filename
    sourceMaps: 'both'

  compiled = generate ast, filename, source, opts
  handle_error compiled


transformer = fn store_map: fn source, filename:
  {code, source_map} = transform source, filename
  store_map filename, source_map
  code


install_source_map_support = fn get_map:
  sms_install
    dict:
      handleUncaughtExceptions: false
      environment: 'node'
      retrieveSourceMap: get_map


maps_retriever = fn source_maps: fn filename:
  source_map = source_maps.(filename) || null

  match null:
    source_map: null
    else: {url: null, map: source_map}


maps_updater = fn source_maps: fn filename, source_map:
  set_props source_maps, {(filename): source_map}


main = fn:
  source_maps = {}

  install_source_map_support maps_retriever source_maps
  hook = transformer maps_updater source_maps

  addHook hook, {exts: ['.fnk'], ignoreNodeModules: false}


main()
